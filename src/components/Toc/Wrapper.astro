---
import type { AstroTocProps, TocItemProps } from "./types.ts";
import Expand from "@/assets/icons/expand.svg";
import Collapse from "@/assets/icons/collapse.svg";
import TocItem from "./Item.astro";

interface Props {
	toc: AstroTocProps[];
	label: string;
	isMobile?: boolean;
	itemIndent?: number;
	class?: string;
	style?: {
		[key: string]: string | number;
	};
}

const {
	toc,
	label = "Table of Contents",
	isMobile = false,
	itemIndent = "1rem",
	class: classlist,
	style: styles,
} = Astro.props;

function createNestedArray(inputArray: AstroTocProps[]) {
	const result = [] as TocItemProps[];
	const stack = [] as TocItemProps[];

	if (inputArray.length === 0) return result;
	if (inputArray[0].depth > 2) return result;

	inputArray.forEach((item) => {
		const newItem = { ...item, children: [] };

		// If stack is empty or item's depth is 2, add it to the result array
		if (stack.length === 0 || item.depth === 2) {
			result.push(newItem);
			stack.push(newItem);
		} else {
			// Otherwise, pop from stack until we find the parent with depth - 1
			while (stack.length && stack[stack.length - 1].depth >= item.depth) {
				stack.pop();
			}

			// Add the new item as a child of the current top of the stack
			stack[stack.length - 1].children.push(newItem);
			stack.push(newItem);
		}
	});

	return result;
}

const tocItems = createNestedArray(toc);
const style = {
	"--toc-indent": itemIndent,
	...styles,
};
---

{
	tocItems.length > 0 && !isMobile && (
		<nav aria-label={label} class:list={["toc", classlist]} style={style}>
			<p>
				<strong>{label}</strong>
			</p>
			<ul>
				{tocItems.map((item) => (
					<TocItem item={item} />
				))}
			</ul>
		</nav>
	)
}

{
	tocItems.length > 0 && isMobile && (
		<nav aria-label={label} class:list={["toc", classlist]} style={style}>
			<details id="mobileDetailsToc">
				<summary class="list-none btn w-full align">
					<span>{label}</span>
					<span class="stack" aria-hidden="true">
						<Expand width="24" height="24" class="toggle-hide" />
						<Collapse width="24" height="24" class="toggle-show" />
					</span>
				</summary>
				<ul onclick="mobileDetailsToc.removeAttribute('open')">
					{tocItems.map((item) => (
						<TocItem item={item} />
					))}
				</ul>
			</details>
		</nav>
	)
}

<style is:global>
	.toc {
		& a {
			display: inline-block;
			font-weight: inherit;
			text-decoration: none;

			&:hover {
				color: var(--brand);
				text-decoration: underline;
			}
		}

		& li {
			margin-block: 0.25rem;

			& > ul {
				padding-inline-start: var(--toc-indent, 1rem);
				font-size: 1rem;
			}
		}
	}
</style>
