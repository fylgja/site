---
interface Props {
	class?: string;
	style?: string;
	useDefaultBtn?: boolean;
	btnClasses?: string;
	btnLabel?: string;
}

const {
	class: classes,
	style,
	useDefaultBtn = true,
	btnClasses,
	btnLabel = "Open Offcanvas",
} = Astro.props;
---

<auto-dialog>
	<slot name="button">
		{
			useDefaultBtn && (
				<button data-open class={btnClasses} style="--btn-stroke: #0000">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
					>
						<title>{btnLabel}</title>
						<line x1="4" x2="20" y1="12" y2="12" />
						<line x1="4" x2="20" y1="6" y2="6" />
						<line x1="4" x2="20" y1="18" y2="18" />
					</svg>
				</button>
			)
		}
	</slot>
	<dialog class:list={["offcanvas", classes]} style={`border-radius: 0; ${style}`}>
		<slot />
	</dialog>
</auto-dialog>

<script>
	// @ts-nocheck
	class AutoDialog extends HTMLElement {
		constructor() {
			self = super();
		}

		connectedCallback() {
			const button = self.querySelector("button[data-open]") as HTMLButtonElement;
			const dialog = self.querySelector("dialog") as HTMLDialogElement;

			if (button) {
				button.addEventListener("click", () => dialog.showModal());
			}

			function hasBackdropClick(event: MouseEvent, element: HTMLDialogElement) {
				const rect = element.getBoundingClientRect();
				const isInDialog =
					rect.top <= event.clientY &&
					event.clientY <= rect.top + rect.height &&
					rect.left <= event.clientX &&
					event.clientX <= rect.left + rect.width;

				return !isInDialog;
			}

			dialog.addEventListener("mouseup", (event) => {
				if (!hasBackdropClick(event, dialog)) return;
				dialog.close("dismiss");
			});

			dialog.addEventListener("click", (event) => {
				if (!event.target.closest("button[data-close]")) return;
				dialog.close("dismiss");
			});
		}
	}

	customElements.define("auto-dialog", AutoDialog);
</script>
