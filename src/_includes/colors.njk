<style>
  #component-colors { font-size: 0.75rem; }
  #component-colors .grid { --cols-size: 8em; }
  #component-colors .color-title { font-size: 1.25em; text-transform: capitalize; }
  #component-colors .color-box {
    min-block-size: 1rem;
    padding: 0.5em;
    border: 1px solid hsl(0 0% 0% / 10%);
    border-radius: 0.5em;
    background: var(--_bg);
    color: var(--_fg);
    font-weight: 450;
    white-space: nowrap;
  }
  #component-colors .color-box ::selection {
    --selection-bg: hsl(0 0% 0% / 30%);
  }
  #component-colors:is([class*="show-"]) .grid { --cols-size: 16em }
  #component-colors:not([class*="show-"]) .color-box > span { display: none; }
  #component-colors:is(.show-hsl, .show-hex) .color-box.-oklch { display: none; }
  #component-colors:not(.show-hsl) .color-box.-hsl { display: none; }
  #component-colors:not(.show-hex) .color-box.-hex { display: none; }
  #component-colors-picker {
    --btn-padding: 0.5em 1em;
    z-index: 1;
    position: sticky;
    bottom: 1rem;
    padding: 2px;
    border-radius: 0.5em;
    background-color: var(--page-header-bg, hsl(0, 0%, 100%));
  }
  @supports (-webkit-backdrop-filter: blur(1px)) or (backdrop-filter: blur(1px)) {
    #component-colors-picker {
        background-color: var(--page-header-bg, hsla(0, 0%, 100%, 0.7));
        -webkit-backdrop-filter: blur(8px);
        backdrop-filter: blur(8px);
    }
  }
</style>
<div id="component-colors">
<dl id="component-colors-grid" class="grid auto-grid" aria-label="Fylgja Color Tokens List">
{% for colorKey in tokens.colors.keys %}
<div class="colors-group">
<dt class="color-title mb-1">{{ colorKey }}</dt>
{% for i in range(tokens.colors.count) %}
<dd
class="color-box -oklch"
style="--_bg: oklch({{ tokens.colors.oklch[colorKey][i] }}); --_fg: {{ "#fff" if i > 5 else "#111" }};"
><span>oklch({{ tokens.colors.oklch[colorKey][i] }})</span></dd>
<dd
class="color-box -hsl"
style="--_bg: hsl({{ tokens.colors.hsl[colorKey][i] }}); --_fg: {{ "#fff" if i > 5 else "#111" }};"
>hsl({{ tokens.colors.hsl[colorKey][i] }})</dd>
<dd
class="color-box -hex"
style="--_bg: {{ tokens.colors.hex[colorKey][i] }}; --_fg: {{ "#fff" if i > 5 else "#111" }};"
>{{ tokens.colors.hex[colorKey][i] }}</dd>
{% endfor %}
</div>
{% endfor %}
</dl>
<div id="component-colors-picker" class="flex items-center gap-1">
  <span style="padding: var(--btn-padding)">Toggle color values:</span>
  <button type="button" onclick="toggleColorSyntax(null)" class="btn">Hide</button>
  <button type="button" data-color="oklch" onclick="toggleColorSyntax('oklch')" class="btn">okLCH</button>
  <button type="button" data-color="hsl" onclick="toggleColorSyntax('hsl')" class="btn">HSL</button>
  <button type="button" data-color="hex" onclick="toggleColorSyntax('hex')" class="btn">HEX</button>
</div>
</div>
<script>
  const setColorSyntax = () => {
      const preferences = JSON.parse(localStorage.getItem("fylgja-preferences"));
      toggleColorSyntax(preferences && preferences.colorSyntax || null);
  };
  const saveColorSyntax = (syntax) => {
    const preferences = JSON.parse(localStorage.getItem("fylgja-preferences"));
    localStorage.setItem("fylgja-preferences", JSON.stringify({ ...preferences, colorSyntax: syntax }));
  };
  setColorSyntax();
  function toggleColorSyntax(syntax) {
    const colorBox = document.getElementById("component-colors");
    const colorBtns = document.getElementById("component-colors-picker").querySelectorAll('button');
    colorBox.classList.toggle("show-oklch", syntax === "oklch");
    colorBox.classList.toggle("show-hsl", syntax === "hsl");
    colorBox.classList.toggle("show-hex", syntax === "hex");
    colorBtns.forEach((btn) => btn.classList.toggle("is-active", syntax === btn.getAttribute('data-color')));
    saveColorSyntax(syntax);
  }
</script>
