---
import { getCollection } from "astro:content";
import Layout from "@/layouts/DocsLayout.astro";
import MetaVersion from "@/components/MetaVersion.astro";
import collection from "./_collection.ts";
import EditWithGithub from "@/components/EditWithGithub.astro";

export async function getStaticPaths() {
	const entries = await getCollection("library");
	return entries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { pageTitle, title, description, git, npm, changelog } = entry.data;
const { Content, headings } = await entry.render();
const hasMeta = !!git || !!npm;
---

<Layout
	title={title}
	description={description}
	toc={headings}
	collectionName="Library"
	collection={collection}
>
	<h1>{pageTitle || title}</h1>
	{hasMeta && <MetaVersion git={git} npm={npm} changelog={changelog} />}
	<Content />
	{
		entry.filePath && (
			<aside class="italic text-end" style="--my: 3rem 0" aria-label="Additional Meta">
				<EditWithGithub pathUrl={entry.filePath} />
			</aside>
		)
	}
</Layout>

<style is:global>
	:where(.demo-box) {
		display: grid;
		place-content: center;
		border-radius: var(--radius-2);
		border: var(--demo-box-stroke-size, 1px) solid var(--demo-box-stroke, var(--brand));
		background-color: var(--demo-box-bg, var(--surface-color));
		aspect-ratio: var(--ratio-box);
		min-inline-size: var(--demo-box-min-size, clamp(var(--size-8), 10vw, var(--size-20)));
		padding: var(--size-1) var(--size-2);
		line-height: 1.1;
		transition: scale 0.3s ease-out;

		@media (hover: hover) {
			&.--scaler:hover {
				z-index: 1;
				scale: 1.3;
			}
		}

		&.--inline {
			display: inline-grid;
			aspect-ratio: auto;
			line-height: inherit;
		}
	}

	.demo-wrapper {
		--demo-raster-size: 1.5rem;
		--demo-stroke-size: 1px;
		--separator-flow: 1em;
		--_dbs: var(--demo-stroke-size);
		min-block-size: var(--demo-wrapper-min-size);
		padding: var(--size-6);
		border: var(--_dbs) dashed var(--border-color-fade);
		background-image:
			linear-gradient(to right, var(--surface-color) var(--_dbs), transparent var(--_dbs)),
			linear-gradient(to bottom, var(--surface-color) var(--_dbs), transparent var(--_dbs));
		background-size: var(--demo-raster-size) var(--demo-raster-size);
		background-position: calc(var(--demo-raster-size) / 2) calc(var(--demo-raster-size) / 2);
		background-clip: padding-box;

		&.--resize {
			container-type: inline-size;
			max-inline-size: 100%;
			resize: inline;
			overflow: scroll;
		}
	}

	@keyframes animate-demo-easing {
		40%,
		50% {
			translate: calc(var(--box-size) - (var(--item-size) + 2px)) 0%;
		}

		0%,
		90% {
			translate: 0%;
		}
	}

	.demo-easing {
		--box-size: min((100vw - var(--container-gap)), 500px);
		--item-size: 50px;
		position: relative;
		gap: var(--size-2);
		max-inline-size: var(--box-size);
		margin-block: var(--size-4);
		padding-block: var(--size-2);
		border-inline: 1px dashed var(--border-color-fade);
		overflow: clip;

		&::after {
			content: "";
			z-index: -1;
			position: absolute;
			inset-block: 0;
			inset-inline-start: calc(50% - 1px);
			border-inline-start: 1px dashed var(--border-color-fade);
		}

		& .demo-box {
			--demo-box-min-size: 0px;
			inline-size: var(--item-size);
			position: relative;
			animation: animate-demo-easing var(--demo-animate-speed, 5s) ease infinite;
		}

		&.is-paused {
			& .demo-box {
				animation-play-state: paused;
			}
		}
	}
</style>
