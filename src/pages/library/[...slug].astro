---
import { getCollection } from "astro:content";
import Layout from "@/layouts/DocsLayout.astro";
import MetaVersion from "@/components/MetaVersion.astro";
import collection from "./collection.ts";

export async function getStaticPaths() {
	const entries = await getCollection("library");
	return entries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { pageTitle, title, version, git, npm, changelog } = entry.data;
const { Content, headings } = await entry.render();
const hasMeta = !!git || !!npm;
---

<Layout title={title} toc={headings} collectionName="Library" collection={collection}>
	<h1>{pageTitle || title}</h1>
	{hasMeta && <MetaVersion version={version} git={git} npm={npm} changelog={changelog} />}
	<Content />
</Layout>

<style is:global>
	.demo-box {
		display: grid;
		place-content: center;
		border-radius: var(--radius-2);
		border: 1px solid var(--demo-box-stroke, var(--brand));
		background-color: var(--demo-box-bg, var(--surface-color));
		aspect-ratio: var(--ratio-box);
		min-inline-size: var(--demo-box-min-size, clamp(var(--size-16), 10vw, var(--size-21)));
		padding: var(--size-4);
		line-height: 1.1;
		transition: scale 0.3s ease-out;

		@media (hover: hover) {
			&.-scaler:hover {
				z-index: 1;
				scale: 1.3;
			}
		}

		&.-inline {
			display: inline-grid;
			aspect-ratio: auto;
			line-height: inherit;
		}
	}

	.demo-wrapper {
		min-block-size: var(--demo-wrapper-min-size);
		padding: var(--size-6);
		border: 1px dashed var(--border-color-fade);
	}

	.demo-table {
		--table-py: 0.25em;
		--table-even-bg: var(--root-bg);
		overflow-x: auto;

		& table {
			display: table;
			inline-size: 100%;

			@media (width >= 768px) {
				font-size: 0.875em;
				white-space: nowrap;
			}
		}

		& tr :is(th, td):last-child {
			display: none;

			@media (width >= 768px) {
				display: table-cell;
			}

			& > div {
				block-size: 1.5em;
				background: var(--brand);
				background: linear-gradient(
					to right,
					var(--brand),
					oklch(from var(--brand) l c calc(h + 20))
				);
			}
		}
	}

	@keyframes --demo-animate-easing {
		40%,
		50% {
			translate: calc(var(--box-size) - (var(--item-size) + 2px)) 0%;
		}

		0%,
		90% {
			translate: 0%;
		}
	}

	.demo-easing {
		--box-size: min((100vw - var(--container-gap)), 500px);
		--item-size: 50px;
		position: relative;
		gap: var(--size-2);
		max-inline-size: var(--box-size);
		margin-block: var(--size-4);
		padding-block: var(--size-2);
		border-inline: 1px dashed var(--border-color-fade);
		overflow: clip;

		&::after {
			content: "";
			z-index: -1;
			position: absolute;
			inset-block: 0;
			inset-inline-start: calc(50% - 1px);
			border-inline-start: 1px dashed var(--border-color-fade);
		}

		& .demo-box {
			--demo-box-min-size: 0px;
			inline-size: var(--item-size);
			position: relative;
			animation: --demo-animate-easing 3s ease infinite;
		}

		&.is-paused {
			& .demo-box {
				animation-play-state: paused;
			}
		}
	}
</style>
