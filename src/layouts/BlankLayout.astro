---
import "@/assets/main.css";
import siteConfig from "site.config";
import defaultSocialImage from "@/assets/default-social-img.png";
import siteLogo from "@/assets/logo.svg";
import Head from "@/components/Head.astro";
import Schema from "@/components/Schema.astro";
import SchemaCrumbs from "@/components/SchemaCrumbs.astro";
import Speculation from "@/components/Speculation.astro";
import type { SpeculationType } from "@/components/Speculation.astro";

interface Props {
	title: string;
	description?: string;
	image?: string;
	pageType?: "website" | "article";
	lang?: string;
	dir?: "ltr" | "rtl";
	speculationrules?: {
		prerender?: SpeculationType[];
		prefetch?: SpeculationType[];
	};
}

const {
	title,
	description = siteConfig.description,
	image = defaultSocialImage.src,
	pageType = "website",
	lang = "en",
	dir = "ltr",
	speculationrules,
} = Astro.props;
---

<html lang={lang} dir={dir} data-theme="auto">
	<Head
		siteName={siteConfig.name}
		title={title}
		description={description}
		image={image}
		themeColor={siteConfig.themeColor}
		themeColorDark={siteConfig.themeColorDark}
		ogType={pageType}
	>
		<meta name="generator" content="Fylgja CSS" />
		<meta name="fediverse:creator" content="@fylgja@fosstodon.org" />
		{Object.values(siteConfig.socials).map((item) => <link href={item} rel="me" />)}
		<link
			rel="alternate"
			type="application/rss+xml"
			title=""
			href={new URL("blog/feed.xml", Astro.site)}
		/>
		<link rel="sitemap" href="/sitemap-index.xml" />
		<Schema
			data={{
				"@context": "https://schema.org",
				"@type": "Organization",
				url: Astro.site,
				logo: siteLogo.src,
				name: siteConfig.name,
				alternateName: "Fylgja CSS",
				description: siteConfig.description,
				foundingDate: siteConfig.foundingDate,
				sameAs: Object.values(siteConfig.socials),
			}}
		/>
		<SchemaCrumbs />
		<slot name="head" />
		<Speculation rules={speculationrules} />
		<script is:inline>
			function getColorScheme() {
				const preference = localStorage.getItem("theme-preference");
				return preference
					? preference
					: window.matchMedia("(prefers-color-scheme: dark)").matches
						? "dark"
						: "light";
			}

			document.documentElement.setAttribute("data-theme", getColorScheme());

			window.addEventListener("load", () => {
				if ("serviceWorker" in navigator) {
					navigator.serviceWorker.register("/sw.js");
				}
			});
		</script>
	</Head>
	<body>
		<slot />
	</body>
</html>
