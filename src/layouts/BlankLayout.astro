---
import Head from "@/components/Head.astro";
import Schema from "@/components/Schema.astro";
import siteConfig from "site.config";
import defaultSocialImage from "@/assets/default-social-img.png";
import siteLogo from "@/assets/logo.svg";

interface Props {
	title: string;
	description?: string;
	image?: string;
	pageType?: "website" | "article";
	lang?: string;
	dir?: "ltr" | "rtl";
}

const {
	title,
	description = siteConfig.description,
	image = defaultSocialImage.src,
	pageType = "website",
	lang = "en",
	dir = "ltr",
} = Astro.props;

const currentUrl = Astro.url.pathname;
const paths = currentUrl.split("/").filter((crumb: any) => crumb);
const itemListElement: {}[] = [];

// TODO get real title for each path
if (paths.length) {
	paths.forEach((path, index) => {
		itemListElement.push({
			"@type": "ListItem",
			position: index + 1,
			item: {
				"@id": `${Astro.site}${paths.slice(0, index + 1).join("/")}/`,
				name: index + 1 === paths.length ? title : path,
			},
		});
	});
}
---

<html lang={lang} dir={dir} data-theme="auto">
	<Head
		siteName={siteConfig.name}
		title={title}
		description={description}
		image={image}
		themeColor={siteConfig.themeColor}
		themeColorDark={siteConfig.themeColorDark}
		ogType={pageType}
	>
		<meta name="generator" content="Fylgja CSS" />
		<meta name="fediverse:creator" content="@fylgja@fosstodon.org" />
		{Object.values(siteConfig.socials).map((item) => <link href={item} rel="me" />)}
		<link
			rel="alternate"
			type="application/rss+xml"
			title=""
			href={new URL("blog/feed.xml", Astro.site)}
		/>
		<link rel="sitemap" href="/sitemap-index.xml" />
		<Schema
			data={{
				"@context": "https://schema.org",
				"@type": "Organization",
				url: Astro.site,
				logo: siteLogo.src,
				name: siteConfig.name,
				alternateName: "Fylgja CSS",
				description: siteConfig.description,
				foundingDate: siteConfig.foundingDate,
				sameAs: Object.values(siteConfig.socials),
			}}
		/>
		{
			!!itemListElement.length && (
				<Schema
					data={{
						"@context": "https://schema.org",
						"@type": "BreadcrumbList",
						itemListElement,
					}}
				/>
			)
		}
		<slot name="head" />
		<script type="speculationrules">
			{
				"prerender": [
					{
						"source": "document",
						"where": {
							"and": [
								{ "href_matches": "/*" },
								{ "not": { "selector_matches": ".do-not-prerender" } },
								{ "not": { "selector_matches": "[download]" } },
								{ "not": { "selector_matches": "[rel~=nofollow]" } }
							]
						},
						"eagerness": "moderate"
					}
				]
			}
		</script>
		<script is:inline>
			function getColorScheme() {
				const preference = localStorage.getItem("theme-preference");
				return preference
					? preference
					: window.matchMedia("(prefers-color-scheme: dark)").matches
						? "dark"
						: "light";
			}

			document.documentElement.setAttribute("data-theme", getColorScheme());

			window.addEventListener("load", () => {
				if ("serviceWorker" in navigator) {
					navigator.serviceWorker.register("/sw.js");
				}
			});
		</script>
	</Head>
	<body>
		<slot />
	</body>
</html>
